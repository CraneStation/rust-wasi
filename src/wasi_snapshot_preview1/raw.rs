// This file is automatically generated, DO NOT EDIT
//
// To regenerate this file run the `crates/generate-raw` command

#![allow(non_camel_case_types)]

pub type __wasi_size_t = usize;
pub type __wasi_filesize_t = u64;
pub type __wasi_timestamp_t = u64;
pub type __wasi_clockid_t = u32;
pub const __WASI_CLOCKID_REALTIME: __wasi_clockid_t = 0;
pub const __WASI_CLOCKID_MONOTONIC: __wasi_clockid_t = 1;
pub const __WASI_CLOCKID_PROCESS_CPUTIME_ID: __wasi_clockid_t = 2;
pub const __WASI_CLOCKID_THREAD_CPUTIME_ID: __wasi_clockid_t = 3;
pub type __wasi_errno_t = u16;
pub const __WASI_ERRNO_SUCCESS: __wasi_errno_t = 0;
pub const __WASI_ERRNO_2BIG: __wasi_errno_t = 1;
pub const __WASI_ERRNO_ACCES: __wasi_errno_t = 2;
pub const __WASI_ERRNO_ADDRINUSE: __wasi_errno_t = 3;
pub const __WASI_ERRNO_ADDRNOTAVAIL: __wasi_errno_t = 4;
pub const __WASI_ERRNO_AFNOSUPPORT: __wasi_errno_t = 5;
pub const __WASI_ERRNO_AGAIN: __wasi_errno_t = 6;
pub const __WASI_ERRNO_ALREADY: __wasi_errno_t = 7;
pub const __WASI_ERRNO_BADF: __wasi_errno_t = 8;
pub const __WASI_ERRNO_BADMSG: __wasi_errno_t = 9;
pub const __WASI_ERRNO_BUSY: __wasi_errno_t = 10;
pub const __WASI_ERRNO_CANCELED: __wasi_errno_t = 11;
pub const __WASI_ERRNO_CHILD: __wasi_errno_t = 12;
pub const __WASI_ERRNO_CONNABORTED: __wasi_errno_t = 13;
pub const __WASI_ERRNO_CONNREFUSED: __wasi_errno_t = 14;
pub const __WASI_ERRNO_CONNRESET: __wasi_errno_t = 15;
pub const __WASI_ERRNO_DEADLK: __wasi_errno_t = 16;
pub const __WASI_ERRNO_DESTADDRREQ: __wasi_errno_t = 17;
pub const __WASI_ERRNO_DOM: __wasi_errno_t = 18;
pub const __WASI_ERRNO_DQUOT: __wasi_errno_t = 19;
pub const __WASI_ERRNO_EXIST: __wasi_errno_t = 20;
pub const __WASI_ERRNO_FAULT: __wasi_errno_t = 21;
pub const __WASI_ERRNO_FBIG: __wasi_errno_t = 22;
pub const __WASI_ERRNO_HOSTUNREACH: __wasi_errno_t = 23;
pub const __WASI_ERRNO_IDRM: __wasi_errno_t = 24;
pub const __WASI_ERRNO_ILSEQ: __wasi_errno_t = 25;
pub const __WASI_ERRNO_INPROGRESS: __wasi_errno_t = 26;
pub const __WASI_ERRNO_INTR: __wasi_errno_t = 27;
pub const __WASI_ERRNO_INVAL: __wasi_errno_t = 28;
pub const __WASI_ERRNO_IO: __wasi_errno_t = 29;
pub const __WASI_ERRNO_ISCONN: __wasi_errno_t = 30;
pub const __WASI_ERRNO_ISDIR: __wasi_errno_t = 31;
pub const __WASI_ERRNO_LOOP: __wasi_errno_t = 32;
pub const __WASI_ERRNO_MFILE: __wasi_errno_t = 33;
pub const __WASI_ERRNO_MLINK: __wasi_errno_t = 34;
pub const __WASI_ERRNO_MSGSIZE: __wasi_errno_t = 35;
pub const __WASI_ERRNO_MULTIHOP: __wasi_errno_t = 36;
pub const __WASI_ERRNO_NAMETOOLONG: __wasi_errno_t = 37;
pub const __WASI_ERRNO_NETDOWN: __wasi_errno_t = 38;
pub const __WASI_ERRNO_NETRESET: __wasi_errno_t = 39;
pub const __WASI_ERRNO_NETUNREACH: __wasi_errno_t = 40;
pub const __WASI_ERRNO_NFILE: __wasi_errno_t = 41;
pub const __WASI_ERRNO_NOBUFS: __wasi_errno_t = 42;
pub const __WASI_ERRNO_NODEV: __wasi_errno_t = 43;
pub const __WASI_ERRNO_NOENT: __wasi_errno_t = 44;
pub const __WASI_ERRNO_NOEXEC: __wasi_errno_t = 45;
pub const __WASI_ERRNO_NOLCK: __wasi_errno_t = 46;
pub const __WASI_ERRNO_NOLINK: __wasi_errno_t = 47;
pub const __WASI_ERRNO_NOMEM: __wasi_errno_t = 48;
pub const __WASI_ERRNO_NOMSG: __wasi_errno_t = 49;
pub const __WASI_ERRNO_NOPROTOOPT: __wasi_errno_t = 50;
pub const __WASI_ERRNO_NOSPC: __wasi_errno_t = 51;
pub const __WASI_ERRNO_NOSYS: __wasi_errno_t = 52;
pub const __WASI_ERRNO_NOTCONN: __wasi_errno_t = 53;
pub const __WASI_ERRNO_NOTDIR: __wasi_errno_t = 54;
pub const __WASI_ERRNO_NOTEMPTY: __wasi_errno_t = 55;
pub const __WASI_ERRNO_NOTRECOVERABLE: __wasi_errno_t = 56;
pub const __WASI_ERRNO_NOTSOCK: __wasi_errno_t = 57;
pub const __WASI_ERRNO_NOTSUP: __wasi_errno_t = 58;
pub const __WASI_ERRNO_NOTTY: __wasi_errno_t = 59;
pub const __WASI_ERRNO_NXIO: __wasi_errno_t = 60;
pub const __WASI_ERRNO_OVERFLOW: __wasi_errno_t = 61;
pub const __WASI_ERRNO_OWNERDEAD: __wasi_errno_t = 62;
pub const __WASI_ERRNO_PERM: __wasi_errno_t = 63;
pub const __WASI_ERRNO_PIPE: __wasi_errno_t = 64;
pub const __WASI_ERRNO_PROTO: __wasi_errno_t = 65;
pub const __WASI_ERRNO_PROTONOSUPPORT: __wasi_errno_t = 66;
pub const __WASI_ERRNO_PROTOTYPE: __wasi_errno_t = 67;
pub const __WASI_ERRNO_RANGE: __wasi_errno_t = 68;
pub const __WASI_ERRNO_ROFS: __wasi_errno_t = 69;
pub const __WASI_ERRNO_SPIPE: __wasi_errno_t = 70;
pub const __WASI_ERRNO_SRCH: __wasi_errno_t = 71;
pub const __WASI_ERRNO_STALE: __wasi_errno_t = 72;
pub const __WASI_ERRNO_TIMEDOUT: __wasi_errno_t = 73;
pub const __WASI_ERRNO_TXTBSY: __wasi_errno_t = 74;
pub const __WASI_ERRNO_XDEV: __wasi_errno_t = 75;
pub const __WASI_ERRNO_NOTCAPABLE: __wasi_errno_t = 76;
pub type __wasi_rights_t = u64;
pub const __WASI_RIGHTS_FD_DATASYNC: __wasi_rights_t = 0x1;
pub const __WASI_RIGHTS_FD_READ: __wasi_rights_t = 0x2;
pub const __WASI_RIGHTS_FD_SEEK: __wasi_rights_t = 0x4;
pub const __WASI_RIGHTS_FD_FDSTAT_SET_FLAGS: __wasi_rights_t = 0x8;
pub const __WASI_RIGHTS_FD_SYNC: __wasi_rights_t = 0x10;
pub const __WASI_RIGHTS_FD_TELL: __wasi_rights_t = 0x20;
pub const __WASI_RIGHTS_FD_WRITE: __wasi_rights_t = 0x40;
pub const __WASI_RIGHTS_FD_ADVISE: __wasi_rights_t = 0x80;
pub const __WASI_RIGHTS_FD_ALLOCATE: __wasi_rights_t = 0x100;
pub const __WASI_RIGHTS_PATH_CREATE_DIRECTORY: __wasi_rights_t = 0x200;
pub const __WASI_RIGHTS_PATH_CREATE_FILE: __wasi_rights_t = 0x400;
pub const __WASI_RIGHTS_PATH_LINK_SOURCE: __wasi_rights_t = 0x800;
pub const __WASI_RIGHTS_PATH_LINK_TARGET: __wasi_rights_t = 0x1000;
pub const __WASI_RIGHTS_PATH_OPEN: __wasi_rights_t = 0x2000;
pub const __WASI_RIGHTS_FD_READDIR: __wasi_rights_t = 0x4000;
pub const __WASI_RIGHTS_PATH_READLINK: __wasi_rights_t = 0x8000;
pub const __WASI_RIGHTS_PATH_RENAME_SOURCE: __wasi_rights_t = 0x10000;
pub const __WASI_RIGHTS_PATH_RENAME_TARGET: __wasi_rights_t = 0x20000;
pub const __WASI_RIGHTS_PATH_FILESTAT_GET: __wasi_rights_t = 0x40000;
pub const __WASI_RIGHTS_PATH_FILESTAT_SET_SIZE: __wasi_rights_t = 0x80000;
pub const __WASI_RIGHTS_PATH_FILESTAT_SET_TIMES: __wasi_rights_t = 0x100000;
pub const __WASI_RIGHTS_FD_FILESTAT_GET: __wasi_rights_t = 0x200000;
pub const __WASI_RIGHTS_FD_FILESTAT_SET_SIZE: __wasi_rights_t = 0x400000;
pub const __WASI_RIGHTS_FD_FILESTAT_SET_TIMES: __wasi_rights_t = 0x800000;
pub const __WASI_RIGHTS_PATH_SYMLINK: __wasi_rights_t = 0x1000000;
pub const __WASI_RIGHTS_PATH_REMOVE_DIRECTORY: __wasi_rights_t = 0x2000000;
pub const __WASI_RIGHTS_PATH_UNLINK_FILE: __wasi_rights_t = 0x4000000;
pub const __WASI_RIGHTS_POLL_FD_READWRITE: __wasi_rights_t = 0x8000000;
pub const __WASI_RIGHTS_SOCK_SHUTDOWN: __wasi_rights_t = 0x10000000;
pub type __wasi_fd_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_iovec_t {
    pub buf: *mut u8,
    pub buf_len: __wasi_size_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_ciovec_t {
    pub buf: *const u8,
    pub buf_len: __wasi_size_t,
}

pub type __wasi_filedelta_t = i64;
pub type __wasi_whence_t = u8;
pub const __WASI_WHENCE_SET: __wasi_whence_t = 0;
pub const __WASI_WHENCE_CUR: __wasi_whence_t = 1;
pub const __WASI_WHENCE_END: __wasi_whence_t = 2;
pub type __wasi_dircookie_t = u64;
pub type __wasi_dirnamlen_t = u32;
pub type __wasi_inode_t = u64;
pub type __wasi_filetype_t = u8;
pub const __WASI_FILETYPE_UNKNOWN: __wasi_filetype_t = 0;
pub const __WASI_FILETYPE_BLOCK_DEVICE: __wasi_filetype_t = 1;
pub const __WASI_FILETYPE_CHARACTER_DEVICE: __wasi_filetype_t = 2;
pub const __WASI_FILETYPE_DIRECTORY: __wasi_filetype_t = 3;
pub const __WASI_FILETYPE_REGULAR_FILE: __wasi_filetype_t = 4;
pub const __WASI_FILETYPE_SOCKET_DGRAM: __wasi_filetype_t = 5;
pub const __WASI_FILETYPE_SOCKET_STREAM: __wasi_filetype_t = 6;
pub const __WASI_FILETYPE_SYMBOLIC_LINK: __wasi_filetype_t = 7;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_dirent_t {
    pub d_next: __wasi_dircookie_t,
    pub d_ino: __wasi_inode_t,
    pub d_namlen: __wasi_dirnamlen_t,
    pub d_type: __wasi_filetype_t,
}
pub type __wasi_advice_t = u8;
pub const __WASI_ADVICE_NORMAL: __wasi_advice_t = 0;
pub const __WASI_ADVICE_SEQUENTIAL: __wasi_advice_t = 1;
pub const __WASI_ADVICE_RANDOM: __wasi_advice_t = 2;
pub const __WASI_ADVICE_WILLNEED: __wasi_advice_t = 3;
pub const __WASI_ADVICE_DONTNEED: __wasi_advice_t = 4;
pub const __WASI_ADVICE_NOREUSE: __wasi_advice_t = 5;
pub type __wasi_fdflags_t = u16;
pub const __WASI_FDFLAGS_APPEND: __wasi_fdflags_t = 0x1;
pub const __WASI_FDFLAGS_DSYNC: __wasi_fdflags_t = 0x2;
pub const __WASI_FDFLAGS_NONBLOCK: __wasi_fdflags_t = 0x4;
pub const __WASI_FDFLAGS_RSYNC: __wasi_fdflags_t = 0x8;
pub const __WASI_FDFLAGS_SYNC: __wasi_fdflags_t = 0x10;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_fdstat_t {
    pub fs_filetype: __wasi_filetype_t,
    pub fs_flags: __wasi_fdflags_t,
    pub fs_rights_base: __wasi_rights_t,
    pub fs_rights_inheriting: __wasi_rights_t,
}
pub type __wasi_device_t = u64;
pub type __wasi_fstflags_t = u16;
pub const __WASI_FSTFLAGS_ATIM: __wasi_fstflags_t = 0x1;
pub const __WASI_FSTFLAGS_ATIM_NOW: __wasi_fstflags_t = 0x2;
pub const __WASI_FSTFLAGS_MTIM: __wasi_fstflags_t = 0x4;
pub const __WASI_FSTFLAGS_MTIM_NOW: __wasi_fstflags_t = 0x8;
pub type __wasi_lookupflags_t = u32;
pub const __WASI_LOOKUPFLAGS_SYMLINK_FOLLOW: __wasi_lookupflags_t = 0x1;
pub type __wasi_oflags_t = u16;
pub const __WASI_OFLAGS_CREAT: __wasi_oflags_t = 0x1;
pub const __WASI_OFLAGS_DIRECTORY: __wasi_oflags_t = 0x2;
pub const __WASI_OFLAGS_EXCL: __wasi_oflags_t = 0x4;
pub const __WASI_OFLAGS_TRUNC: __wasi_oflags_t = 0x8;
pub type __wasi_linkcount_t = u64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_filestat_t {
    pub dev: __wasi_device_t,
    pub ino: __wasi_inode_t,
    pub filetype: __wasi_filetype_t,
    pub nlink: __wasi_linkcount_t,
    pub size: __wasi_filesize_t,
    pub atim: __wasi_timestamp_t,
    pub mtim: __wasi_timestamp_t,
    pub ctim: __wasi_timestamp_t,
}
pub type __wasi_userdata_t = u64;
pub type __wasi_eventtype_t = u8;
pub const __WASI_EVENTTYPE_CLOCK: __wasi_eventtype_t = 0;
pub const __WASI_EVENTTYPE_FD_READ: __wasi_eventtype_t = 1;
pub const __WASI_EVENTTYPE_FD_WRITE: __wasi_eventtype_t = 2;
pub type __wasi_eventrwflags_t = u16;
pub const __WASI_EVENTRWFLAGS_FD_READWRITE_HANGUP: __wasi_eventrwflags_t = 0x1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_event_fd_readwrite_t {
    pub nbytes: __wasi_filesize_t,
    pub flags: __wasi_eventrwflags_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __wasi_event_u_t {
    pub fd_readwrite: __wasi_event_fd_readwrite_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_event_t {
    pub userdata: __wasi_userdata_t,
    pub error: __wasi_errno_t,
    pub r#type: __wasi_eventtype_t,
    pub u: __wasi_event_u_t,
}
pub type __wasi_subclockflags_t = u16;
pub const __WASI_SUBCLOCKFLAGS_SUBSCRIPTION_CLOCK_ABSTIME: __wasi_subclockflags_t = 0x1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_subscription_clock_t {
    pub id: __wasi_clockid_t,
    pub timeout: __wasi_timestamp_t,
    pub precision: __wasi_timestamp_t,
    pub flags: __wasi_subclockflags_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_subscription_fd_readwrite_t {
    pub file_descriptor: __wasi_fd_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __wasi_subscription_u_t {
    pub clock: __wasi_subscription_clock_t,
    pub fd_readwrite: __wasi_subscription_fd_readwrite_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_subscription_t {
    pub userdata: __wasi_userdata_t,
    pub r#type: __wasi_eventtype_t,
    pub u: __wasi_subscription_u_t,
}
pub type __wasi_exitcode_t = u32;
pub type __wasi_signal_t = u8;
pub const __WASI_SIGNAL_NONE: __wasi_signal_t = 0;
pub const __WASI_SIGNAL_HUP: __wasi_signal_t = 1;
pub const __WASI_SIGNAL_INT: __wasi_signal_t = 2;
pub const __WASI_SIGNAL_QUIT: __wasi_signal_t = 3;
pub const __WASI_SIGNAL_ILL: __wasi_signal_t = 4;
pub const __WASI_SIGNAL_TRAP: __wasi_signal_t = 5;
pub const __WASI_SIGNAL_ABRT: __wasi_signal_t = 6;
pub const __WASI_SIGNAL_BUS: __wasi_signal_t = 7;
pub const __WASI_SIGNAL_FPE: __wasi_signal_t = 8;
pub const __WASI_SIGNAL_KILL: __wasi_signal_t = 9;
pub const __WASI_SIGNAL_USR1: __wasi_signal_t = 10;
pub const __WASI_SIGNAL_SEGV: __wasi_signal_t = 11;
pub const __WASI_SIGNAL_USR2: __wasi_signal_t = 12;
pub const __WASI_SIGNAL_PIPE: __wasi_signal_t = 13;
pub const __WASI_SIGNAL_ALRM: __wasi_signal_t = 14;
pub const __WASI_SIGNAL_TERM: __wasi_signal_t = 15;
pub const __WASI_SIGNAL_CHLD: __wasi_signal_t = 16;
pub const __WASI_SIGNAL_CONT: __wasi_signal_t = 17;
pub const __WASI_SIGNAL_STOP: __wasi_signal_t = 18;
pub const __WASI_SIGNAL_TSTP: __wasi_signal_t = 19;
pub const __WASI_SIGNAL_TTIN: __wasi_signal_t = 20;
pub const __WASI_SIGNAL_TTOU: __wasi_signal_t = 21;
pub const __WASI_SIGNAL_URG: __wasi_signal_t = 22;
pub const __WASI_SIGNAL_XCPU: __wasi_signal_t = 23;
pub const __WASI_SIGNAL_XFSZ: __wasi_signal_t = 24;
pub const __WASI_SIGNAL_VTALRM: __wasi_signal_t = 25;
pub const __WASI_SIGNAL_PROF: __wasi_signal_t = 26;
pub const __WASI_SIGNAL_WINCH: __wasi_signal_t = 27;
pub const __WASI_SIGNAL_POLL: __wasi_signal_t = 28;
pub const __WASI_SIGNAL_PWR: __wasi_signal_t = 29;
pub const __WASI_SIGNAL_SYS: __wasi_signal_t = 30;
pub type __wasi_riflags_t = u16;
pub const __WASI_RIFLAGS_RECV_PEEK: __wasi_riflags_t = 0x1;
pub const __WASI_RIFLAGS_RECV_WAITALL: __wasi_riflags_t = 0x2;
pub type __wasi_roflags_t = u16;
pub const __WASI_ROFLAGS_RECV_DATA_TRUNCATED: __wasi_roflags_t = 0x1;
pub type __wasi_siflags_t = u16;
pub type __wasi_sdflags_t = u8;
pub const __WASI_SDFLAGS_RD: __wasi_sdflags_t = 0x1;
pub const __WASI_SDFLAGS_WR: __wasi_sdflags_t = 0x2;
pub type __wasi_preopentype_t = u8;
pub const __WASI_PREOPENTYPE_DIR: __wasi_preopentype_t = 0;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_prestat_dir_t {
    pub pr_name_len: __wasi_size_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __wasi_prestat_u_t {
    pub dir: __wasi_prestat_dir_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_prestat_t {
    pub pr_type: __wasi_preopentype_t,
    pub u: __wasi_prestat_u_t,
}
#[link(wasm_import_module = "wasi_snapshot_preview1")]
extern "C" {
    #[link_name = "args_get"]
    pub fn __wasi_args_get(argv: *mut *mut u8, argv_buf: *mut u8) -> __wasi_errno_t;
    #[link_name = "args_sizes_get"]
    pub fn __wasi_args_sizes_get(
        argc: *mut __wasi_size_t,
        argv_buf_size: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "environ_get"]
    pub fn __wasi_environ_get(environ: *mut *mut u8, environ_buf: *mut u8) -> __wasi_errno_t;
    #[link_name = "environ_sizes_get"]
    pub fn __wasi_environ_sizes_get(
        argc: *mut __wasi_size_t,
        argv_buf_size: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "clock_res_get"]
    pub fn __wasi_clock_res_get(
        id: __wasi_clockid_t,
        resolution: *mut __wasi_timestamp_t,
    ) -> __wasi_errno_t;
    #[link_name = "clock_time_get"]
    pub fn __wasi_clock_time_get(
        id: __wasi_clockid_t,
        precision: __wasi_timestamp_t,
        time: *mut __wasi_timestamp_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_advise"]
    pub fn __wasi_fd_advise(
        fd: __wasi_fd_t,
        offset: __wasi_filesize_t,
        len: __wasi_filesize_t,
        advice: __wasi_advice_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_allocate"]
    pub fn __wasi_fd_allocate(
        fd: __wasi_fd_t,
        offset: __wasi_filesize_t,
        len: __wasi_filesize_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_close"]
    pub fn __wasi_fd_close(fd: __wasi_fd_t) -> __wasi_errno_t;
    #[link_name = "fd_datasync"]
    pub fn __wasi_fd_datasync(fd: __wasi_fd_t) -> __wasi_errno_t;
    #[link_name = "fd_fdstat_get"]
    pub fn __wasi_fd_fdstat_get(fd: __wasi_fd_t, stat: *mut __wasi_fdstat_t) -> __wasi_errno_t;
    #[link_name = "fd_fdstat_set_flags"]
    pub fn __wasi_fd_fdstat_set_flags(fd: __wasi_fd_t, flags: __wasi_fdflags_t) -> __wasi_errno_t;
    #[link_name = "fd_fdstat_set_rights"]
    pub fn __wasi_fd_fdstat_set_rights(
        fd: __wasi_fd_t,
        fs_rights_base: __wasi_rights_t,
        fs_rights_inheriting: __wasi_rights_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_filestat_get"]
    pub fn __wasi_fd_filestat_get(fd: __wasi_fd_t, buf: *mut __wasi_filestat_t) -> __wasi_errno_t;
    #[link_name = "fd_filestat_set_size"]
    pub fn __wasi_fd_filestat_set_size(fd: __wasi_fd_t, size: __wasi_filesize_t) -> __wasi_errno_t;
    #[link_name = "fd_filestat_set_times"]
    pub fn __wasi_fd_filestat_set_times(
        fd: __wasi_fd_t,
        atim: __wasi_timestamp_t,
        mtim: __wasi_timestamp_t,
        fst_flags: __wasi_fstflags_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_pread"]
    pub fn __wasi_fd_pread(
        fd: __wasi_fd_t,
        iovs_ptr: *const __wasi_iovec_t,
        iovs_len: usize,
        offset: __wasi_filesize_t,
        nread: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_prestat_get"]
    pub fn __wasi_fd_prestat_get(fd: __wasi_fd_t, buf: *mut __wasi_prestat_t) -> __wasi_errno_t;
    #[link_name = "fd_prestat_dir_name"]
    pub fn __wasi_fd_prestat_dir_name(
        fd: __wasi_fd_t,
        path: *mut u8,
        path_len: __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_pwrite"]
    pub fn __wasi_fd_pwrite(
        fd: __wasi_fd_t,
        iovs_ptr: *const __wasi_ciovec_t,
        iovs_len: usize,
        offset: __wasi_filesize_t,
        nwritten: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_read"]
    pub fn __wasi_fd_read(
        fd: __wasi_fd_t,
        iovs_ptr: *const __wasi_iovec_t,
        iovs_len: usize,
        nread: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_readdir"]
    pub fn __wasi_fd_readdir(
        fd: __wasi_fd_t,
        buf: *mut u8,
        buf_len: __wasi_size_t,
        cookie: __wasi_dircookie_t,
        bufused: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_renumber"]
    pub fn __wasi_fd_renumber(fd: __wasi_fd_t, to: __wasi_fd_t) -> __wasi_errno_t;
    #[link_name = "fd_seek"]
    pub fn __wasi_fd_seek(
        fd: __wasi_fd_t,
        offset: __wasi_filedelta_t,
        whence: __wasi_whence_t,
        newoffset: *mut __wasi_filesize_t,
    ) -> __wasi_errno_t;
    #[link_name = "fd_sync"]
    pub fn __wasi_fd_sync(fd: __wasi_fd_t) -> __wasi_errno_t;
    #[link_name = "fd_tell"]
    pub fn __wasi_fd_tell(fd: __wasi_fd_t, offset: *mut __wasi_filesize_t) -> __wasi_errno_t;
    #[link_name = "fd_write"]
    pub fn __wasi_fd_write(
        fd: __wasi_fd_t,
        iovs_ptr: *const __wasi_ciovec_t,
        iovs_len: usize,
        nwritten: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "path_create_directory"]
    pub fn __wasi_path_create_directory(
        fd: __wasi_fd_t,
        path_ptr: *const u8,
        path_len: usize,
    ) -> __wasi_errno_t;
    #[link_name = "path_filestat_get"]
    pub fn __wasi_path_filestat_get(
        fd: __wasi_fd_t,
        flags: __wasi_lookupflags_t,
        path_ptr: *const u8,
        path_len: usize,
        buf: *mut __wasi_filestat_t,
    ) -> __wasi_errno_t;
    #[link_name = "path_filestat_set_times"]
    pub fn __wasi_path_filestat_set_times(
        fd: __wasi_fd_t,
        flags: __wasi_lookupflags_t,
        path_ptr: *const u8,
        path_len: usize,
        atim: __wasi_timestamp_t,
        mtim: __wasi_timestamp_t,
        fst_flags: __wasi_fstflags_t,
    ) -> __wasi_errno_t;
    #[link_name = "path_link"]
    pub fn __wasi_path_link(
        old_fd: __wasi_fd_t,
        old_flags: __wasi_lookupflags_t,
        old_path_ptr: *const u8,
        old_path_len: usize,
        new_fd: __wasi_fd_t,
        new_path_ptr: *const u8,
        new_path_len: usize,
    ) -> __wasi_errno_t;
    #[link_name = "path_open"]
    pub fn __wasi_path_open(
        fd: __wasi_fd_t,
        dirflags: __wasi_lookupflags_t,
        path_ptr: *const u8,
        path_len: usize,
        oflags: __wasi_oflags_t,
        fs_rights_base: __wasi_rights_t,
        fs_rights_inherting: __wasi_rights_t,
        fdflags: __wasi_fdflags_t,
        opened_fd: *mut __wasi_fd_t,
    ) -> __wasi_errno_t;
    #[link_name = "path_readlink"]
    pub fn __wasi_path_readlink(
        fd: __wasi_fd_t,
        path_ptr: *const u8,
        path_len: usize,
        buf: *mut u8,
        buf_len: __wasi_size_t,
        bufused: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "path_remove_directory"]
    pub fn __wasi_path_remove_directory(
        fd: __wasi_fd_t,
        path_ptr: *const u8,
        path_len: usize,
    ) -> __wasi_errno_t;
    #[link_name = "path_rename"]
    pub fn __wasi_path_rename(
        fd: __wasi_fd_t,
        old_path_ptr: *const u8,
        old_path_len: usize,
        new_fd: __wasi_fd_t,
        new_path_ptr: *const u8,
        new_path_len: usize,
    ) -> __wasi_errno_t;
    #[link_name = "path_symlink"]
    pub fn __wasi_path_symlink(
        old_path_ptr: *const u8,
        old_path_len: usize,
        fd: __wasi_fd_t,
        new_path_ptr: *const u8,
        new_path_len: usize,
    ) -> __wasi_errno_t;
    #[link_name = "path_unlink_file"]
    pub fn __wasi_path_unlink_file(
        fd: __wasi_fd_t,
        path_ptr: *const u8,
        path_len: usize,
    ) -> __wasi_errno_t;
    #[link_name = "poll_oneoff"]
    pub fn __wasi_poll_oneoff(
        r#in: *const __wasi_subscription_t,
        out: *mut __wasi_event_t,
        nsubscriptions: __wasi_size_t,
        nevents: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "proc_exit"]
    pub fn __wasi_proc_exit(rval: __wasi_exitcode_t) -> !;
    #[link_name = "proc_raise"]
    pub fn __wasi_proc_raise(sig: __wasi_signal_t) -> __wasi_errno_t;
    #[link_name = "sched_yield"]
    pub fn __wasi_sched_yield() -> __wasi_errno_t;
    #[link_name = "random_get"]
    pub fn __wasi_random_get(buf: *mut u8, buf_len: __wasi_size_t) -> __wasi_errno_t;
    #[link_name = "sock_recv"]
    pub fn __wasi_sock_recv(
        fd: __wasi_fd_t,
        ri_data_ptr: *const __wasi_iovec_t,
        ri_data_len: usize,
        ri_flags: __wasi_riflags_t,
        ro_datalen: *mut __wasi_size_t,
        ro_flags: *mut __wasi_roflags_t,
    ) -> __wasi_errno_t;
    #[link_name = "sock_send"]
    pub fn __wasi_sock_send(
        fd: __wasi_fd_t,
        si_data_ptr: *const __wasi_ciovec_t,
        si_data_len: usize,
        si_flags: __wasi_siflags_t,
        so_datalen: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
    #[link_name = "sock_shutdown"]
    pub fn __wasi_sock_shutdown(fd: __wasi_fd_t, how: __wasi_sdflags_t) -> __wasi_errno_t;
}
